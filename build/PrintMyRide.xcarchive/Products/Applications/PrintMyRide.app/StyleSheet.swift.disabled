import SwiftUI

struct StyleSheet: View {
    @Binding var design: PosterDesign
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            Form {
                Section("Stroke") {
                    HStack {
                        Text("Weight")
                        Spacer()
                        Text("\(Int(design.strokeWidthPt)) pt")
                            .foregroundColor(.secondary)
                    }
                    Slider(value: $design.strokeWidthPt, in: 1...20, step: 1)
                }
                
                Section("Shadow") {
                    Toggle("Drop Shadow", isOn: $design.shadowEnabled)
                    
                    if design.shadowEnabled {
                        HStack {
                            Text("Opacity")
                            Spacer()
                            Text("\(Int(design.shadowOpacity * 100))%")
                                .foregroundColor(.secondary)
                        }
                        Slider(value: $design.shadowOpacity, in: 0.1...0.5, step: 0.1)
                    }
                }
                
                Section("Preview") {
                    PreviewStrip(design: design)
                        .frame(height: 60)
                }
            }
            .navigationTitle("Style")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Apply") {
                        dismiss()
                    }
                    .fontWeight(.semibold)
                }
            }
        }
        .presentationDetents([.medium, .large])
        .presentationDragIndicator(.visible)
    }
}

struct PreviewStrip: View {
    let design: PosterDesign
    
    var body: some View {
        GeometryReader { geo in
            ZStack {
                Color(design.backgroundColor.color)
                
                Path { path in
                    let width = geo.size.width
                    let height = geo.size.height
                    let margin: CGFloat = 20
                    
                    path.move(to: CGPoint(x: margin, y: height / 2))
                    path.addLine(to: CGPoint(x: width - margin, y: height / 2))
                }
                .stroke(Color(design.routeColor.color), lineWidth: design.strokeWidthPt)
            }
        }
        .cornerRadius(8)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(Color.secondary, lineWidth: 0.5)
        )
    }
}
